import flixel.FlxG;
import flixel.math.FlxBasePoint;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import flixel.FlxCamera;
import funkin.audio.FunkinSound;
import funkin.Conductor;
import funkin.play.Countdown;
import funkin.graphics.FunkinSprite;
import funkin.modding.module.ScriptedModule;
import funkin.modding.events.ScriptEvent;
import funkin.modding.events.ScriptEventDispatcher;
import funkin.util.ReflectUtil;
import funkin.Paths;
import funkin.play.PlayState;
import funkin.play.stage.Stage;
import funkin.play.stage.Bopper;
import funkin.play.stage.StageProp;
import funkin.data.stage.StageRegistry;
import funkin.play.character.CharacterType;
import funkin.play.character.BaseCharacter;
import funkin.play.character.CharacterDataParser;
import funkin.play.song.Song;
import flixel.FlxSprite;
import haxe.Json;
import funkin.play.notes.Strumline;
import funkin.play.notes.StrumlineNote;
import funkin.play.PlayStatePlaylist;
import funkin.play.cutscene.VideoCutscene;

// Too Slow
// No I don't know how to fix offset notes in the song
// No I'm not going to rechart those areas, there's a lot of them
// Yes I know it's annoying
// It's really annoying
class TooSlowSong extends Song {
    var game;
    
    public var songIntroCircle:FunkinSprite;
    public var songIntroText:FunkinSprite;

    var hasPlayedCutscene:Bool;

    public function new() {
        super("too-slow");

        hasPlayedCutscene = false;
    }

    override function onCreate(event:ScriptEvent):Void {
        game = PlayState.instance;

        super.onCreate(event);
        FunkinSprite.cacheTexture(Paths.image('staticNotes'));
        FunkinSprite.cacheTexture(Paths.image('StartScreens/Circle-too-slow')); // An automated system is in progress.
        FunkinSprite.cacheTexture(Paths.image('StartScreens/Text-too-slow')); // An automated system is in progress.

		songIntroCircle = FunkinSprite.create(0, 0, 'StartScreens/Circle-too-slow');
        songIntroCircle.cameras = [PlayState.instance.camCutscene];
        songIntroCircle.zIndex = 1000;
        songIntroCircle.visible = false;
        game.add(songIntroCircle);

        songIntroText = FunkinSprite.create(0, 0, 'StartScreens/Text-too-slow');
        songIntroText.cameras = [PlayState.instance.camCutscene];
        songIntroText.zIndex = 1000;
        songIntroText.visible = false;
        game.add(songIntroText);

        hasPlayedCutscene = false;

        // Add intro images for "too-slow"*/
    }

    // Reset the script state on game over
    function onGameOver():Void {
        super.onGameOver();
    }
    function onSongRetry():Void {
        super.onSongRetry();

        hasPlayedCutscene = true;
    }

    public override function onCountdownStart(event:CountdownScriptEvent):Void {
        super.onCountdownStart(event);

        if (!PlayStatePlaylist.isStoryMode) hasPlayedCutscene = true;

        if (!hasPlayedCutscene) {
           trace('Pausing countdown to play a video cutscene (`too slow`)');

           hasPlayedCutscene = true;

           event.cancel(); // CANCEL THE COUNTDOWN!

           startVideo();
        } else {
            startSonicIntro();
        }
    }

  function startVideo() {
    VideoCutscene.play(Paths.videos('tooslowcutscene1'));
  }

    function startSonicIntro():Void {

        var blackBackground = new FlxSprite(0, 0);
        blackBackground.makeGraphic(FlxG.width, FlxG.height, 0xFF000000);
        blackBackground.cameras = [PlayState.instance.camCutscene];
        blackBackground.zIndex = 999;
        game.add(blackBackground);

        songIntroCircle = FunkinSprite.create(0, 0, 'StartScreens/Circle-too-slow');
        songIntroCircle.cameras = [PlayState.instance.camCutscene];
        songIntroCircle.zIndex = 1000;
        songIntroCircle.x = FlxG.width;
        game.add(songIntroCircle);

        songIntroText = FunkinSprite.create(0, 0, 'StartScreens/Text-too-slow');
        songIntroText.cameras = [PlayState.instance.camCutscene];
        songIntroText.zIndex = 1000;
        songIntroText.x = -songIntroText.width;
        game.add(songIntroText);

        FlxTween.tween(songIntroCircle, {x: (FlxG.width / 2) - (songIntroCircle.width / 2)}, 1.5, {
            ease: FlxEase.quadOut,
            onComplete: function(tween:FlxTween) {
                FlxTween.tween(songIntroCircle, {alpha: 0}, 1, {
                    ease: FlxEase.quadOut,
                    onComplete: function(tween:FlxTween) {
                        game.remove(songIntroCircle);
                    }
                });
            }
        });

        FlxTween.tween(songIntroText, {x: (FlxG.width / 2) - (songIntroText.width / 2)}, 1.5, {
            ease: FlxEase.quadOut,
            onComplete: function(tween:FlxTween) {
                FlxTween.tween(songIntroText, {alpha: 0}, 1, {
                    ease: FlxEase.quadOut,
                    onComplete: function(tween:FlxTween) {
                        game.remove(songIntroText);
                    }
                });

                FlxTween.tween(blackBackground, {alpha: 0}, 1, {
                    ease: FlxEase.quadOut,
                    onComplete: function(tween:FlxTween) {
                        game.remove(blackBackground);
                    }
                });
            }
        });
    }

}

