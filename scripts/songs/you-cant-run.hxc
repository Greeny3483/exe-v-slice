import flixel.FlxG;
import flixel.math.FlxBasePoint;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import flixel.FlxCamera;
import funkin.audio.FunkinSound;
import funkin.Conductor;
import funkin.graphics.FunkinSprite;
import funkin.modding.module.ScriptedModule;
import funkin.modding.events.ScriptEvent;
import funkin.modding.events.ScriptEventDispatcher;
import funkin.util.ReflectUtil;
import funkin.Paths;
import funkin.play.PlayState;
import funkin.play.stage.Stage;
import funkin.play.stage.Bopper;
import funkin.play.stage.StageProp;
import funkin.data.stage.StageRegistry;
import funkin.play.character.CharacterType;
import funkin.play.character.BaseCharacter;
import funkin.play.character.CharacterDataParser;
import funkin.play.song.Song;
import flixel.FlxSprite;
import haxe.Json;
import funkin.play.notes.Strumline;
import funkin.play.notes.StrumlineNote;
import funkin.play.cutscene.VideoCutscene;
import funkin.play.PlayStatePlaylist;
// Check the other script in scripts/stages/xenoStage for the stage prop editing, everything else is done here.

class YouCantRunSong extends Song {


    var STOP:Bool = false;

    var hasPlayedCutscene:Bool;

    public function new() {
        super("you-cant-run");

        hasPlayedCutscene = false;
    }

    override function onCreate(event:ScriptEvent):Void {

        super.onCreate(event);

        FunkinSprite.cacheTexture(Paths.image('staticNotes'));

        FunkinSprite.cacheTexture(Paths.image('StartScreens/Circle-you-cant-run')); // An automated system is in progress.
        FunkinSprite.cacheTexture(Paths.image('StartScreens/Text-you-cant-run')); // An automated system is in progress.

        game = PlayState.instance;

        hasPlayedCutscene = false;

    }

    function onSongRetry():Void {
        super.onSongRetry();

        hasPlayedCutscene = true;
    }

	function onNoteHit(event:HitNoteScriptEvent)
    {
        if (!event.note.noteData.getMustHitNote())
        {
            if (!STOP)
            {
            if (event.note.holdNoteSprite != null)
            {
                // if there's a sustain, it'll keep on shaking the camera.
                FlxG.camera.shake(0.01, event.note.holdNoteSprite.sustainLength/1000);
            }
            else
                FlxG.camera.shake(0.01, 0.2); // screen will shake for 0.2 seconds if opponent hits a regular note.
            }
        }
    
        super.onNoteHit(event);
    }

    public override function onCountdownStart(event:CountdownScriptEvent):Void {
        super.onCountdownStart(event);

        if (!PlayStatePlaylist.isStoryMode) hasPlayedCutscene = true;

        if (!hasPlayedCutscene) {
           trace('Pausing countdown to play a video cutscene (`too slow`)');

           hasPlayedCutscene = true;

           event.cancel(); // CANCEL THE COUNTDOWN!

           startVideo();
        } else {
            startSonicIntro();
        }
    }

  function startVideo() {
     VideoCutscene.play(Paths.videos('tooslowcutscene2'));
  }

    function startSonicIntro():Void {

        var blackBackground = new FlxSprite(0, 0);
        blackBackground.makeGraphic(FlxG.width, FlxG.height, 0xFF000000);
        blackBackground.cameras = [PlayState.instance.camCutscene];
        blackBackground.zIndex = 999;
        game.add(blackBackground);

        songIntroCircle = FunkinSprite.create(0, 0, 'StartScreens/Circle-you-cant-run');
        songIntroCircle.cameras = [PlayState.instance.camCutscene];
        songIntroCircle.zIndex = 1000;
        songIntroCircle.x = FlxG.width;
        game.add(songIntroCircle);

        songIntroText = FunkinSprite.create(0, 0, 'StartScreens/Text-you-cant-run');
        songIntroText.cameras = [PlayState.instance.camCutscene];
        songIntroText.zIndex = 1000;
        songIntroText.x = -songIntroText.width;
        game.add(songIntroText);

        FlxTween.tween(songIntroCircle, {x: (FlxG.width / 2) - (songIntroCircle.width / 2)}, 1.5, {
            ease: FlxEase.quadOut,
            onComplete: function(tween:FlxTween) {
                FlxTween.tween(songIntroCircle, {alpha: 0}, 1, {
                    ease: FlxEase.quadOut,
                    onComplete: function(tween:FlxTween) {
                        game.remove(songIntroCircle);
                    }
                });
            }
        });

        FlxTween.tween(songIntroText, {x: (FlxG.width / 2) - (songIntroText.width / 2)}, 1.5, {
            ease: FlxEase.quadOut,
            onComplete: function(tween:FlxTween) {
                FlxTween.tween(songIntroText, {alpha: 0}, 1, {
                    ease: FlxEase.quadOut,
                    onComplete: function(tween:FlxTween) {
                        game.remove(songIntroText);
                    }
                });

                FlxTween.tween(blackBackground, {alpha: 0}, 1, {
                    ease: FlxEase.quadOut,
                    onComplete: function(tween:FlxTween) {
                        game.remove(blackBackground);
                    }
                });
            }
        });
    }
}

