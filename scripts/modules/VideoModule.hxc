import funkin.play.PlayState;
import funkin.Conductor;
import funkin.modding.events.ScriptEvent;
import funkin.modding.module.Module;
import funkin.ui.AtlasText;
import flixel.FlxG;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import flixel.tweens.FlxEase;
//import hxcodec.flixel.FlxVideoSprite;
import funkin.play.cutscene.VideoCutscene;

/**
 * VideoModule is the module that handles actual video creation with the help of hxCodec.
 * You are able to call this module directly in your song scripts, here is an example:
 *
 * ```
 * ModuleHandler.getModule("VideoModule").scriptCall("createVid", [Assets.getPath(Paths.videos("VIDEO_FILE_NAME_HERE")), 1, false, 1, true, 3000, true]);
 * ```
 *
 * This tells VideoModule to play a video behind the HUD,
 * enable inputs, set a HUD fade duration of 1,
 * resync the video, have a custom zIndex of 3000,
 * and mute the video.
 *
 *
 */
class VideoModule extends Module {
	/**
	 * The video object, it's an FlxVideoSprite.
	 * You can access this via scriptGet in your song scripts!
	 *
	 * ~ EXAMPLE ~
	 *
	 * ```
	 * new FlxTimer().start(0.1, function(tmr) { // Yes, you need the timer.
	 *     var vid = ModuleHandler.getModule("VideoModule").scriptGet("vidEvent");
	 *     vid.bitmap.onEndReached.add(() -> {
	 *         // Insert wacky shit here.
	 *     });
	 * });
	 * ```
	 */
	public var vidEvent:FlxVideoSprite = null;

	/**
	 * A boolean wether to resync the video or not.
	 */
	var resyncVideo:Bool = false;

	/**
	 * The timestamp of the last played video in milliseconds.
	 */
	var recentTime:Float = null;

	/**
	 * I think you can figure it out.
	 */
	var shittyBool:Bool = false;

	function new() {
		super('VideoModule');
	}

	/**
	 * Handles video creation
	 * @param filePath The path to the video file to be played.
	 * @param isCutscene Wether to hide the HUD or not, takes in an Int as an input.
	 * @param disableControl Wether to disable controls during the video, Boolean.
	 * @param duration The duration of the HUD fade (used in combination with isCutscene!).
	 * @param resync Wether to automatically resync the video if it becomes desynced.
	 * @param zIndex The zIndex of the video.
	 * @param mute Wether to mute the video or not.
	 */
	public function createVid(filePath:String, ?isCutscene:Int = 1, ?disableControl:Bool = false, ?duration:Float = 1, ?resync:Bool = true, ?zIndex:Int = 300,
			?mute:Bool = false):Void {
		vidEvent = new FlxVideoSprite(0, 0);
		vidEvent.zIndex = zIndex;
		if (filePath == null) {
			trace('ALERT: The video is null! How did you come across this?');
			return;
		}
		resyncVideo = resync;

		// Ideally, the video itself should play without any issues.
		// If for some reason hxCodec shits itself or something, this error text will automatically show.
		vidEvent.bitmap.onEncounteredError.add(function() {
			if (vidEvent != null) {
				vidEvent.destroy();
				vidEvent = null;
			}
			var someErrorTextThing:AtlasText = new AtlasText(140, 240, ' AN ERROR OCCURED' + '\nDURING VIDEO PLAYBACK!', 'bold');
			someErrorTextThing.camera = PlayState.instance.camHUD;
			someErrorTextThing.zIndex = 5000;
			PlayState.instance.add(someErrorTextThing);
			new FlxTimer().start(10, function(errortextshit) {
				PlayState.instance.remove(someErrorTextThing);
			});
		}, true);

		vidEvent.bitmap.onEndReached.add(function() {
			if (shittyBool) {
				PlayState.instance.camHUD.visible = true;
				PlayState.instance.camHUD.alpha = 0;
				FlxTween.tween(PlayState.instance.camHUD, {alpha: 1}, 0.5, {
					ease: FlxEase.quadInOut
				});
				shittyBool = false;
			}
			vidEvent.destroy();
			PlayState.instance.isInCutscene = false;
			vidEvent = null;
		}, true);

		vidEvent.autoPause = FlxG.autoPause;

		vidEvent.bitmap.onTextureSetup.add(() -> {
			vidEvent.setGraphicSize(FlxG.width, FlxG.height);
			vidEvent.updateHitbox();
			vidEvent.x = 0;
			vidEvent.y = 0;
		});

		PlayState.instance.add(vidEvent);
		PlayState.instance.refresh();
		if (disableControl) {
			PlayState.instance.isInCutscene = true;
		}

		switch (isCutscene) {
			case 2:
				shittyBool = true;
				// I don't wanna talk about it :(
				iSwearToGodIWillLiterallyStrangleFNFTheFilePathIsLiterallyRightThereYouCanFindItStopLying = filePath;
				fuckingHell = mute;
				FlxTween.tween(PlayState.instance.camHUD, {alpha: 0}, duration, {
					ease: FlxEase.quadOut,
					onComplete: function(twn:FlxTween) {
						vidEvent.cameras = [PlayState.instance.camCutscene];
						PlayState.instance.camHUD.visible = false;
						PlayState.instance.camCutscene.visible = true;
						vidEvent.play(iSwearToGodIWillLiterallyStrangleFNFTheFilePathIsLiterallyRightThereYouCanFindItStopLying);
						vidEvent.bitmap.mute = fuckingHell;
					}
				});
			case 3:
				vidEvent.cameras = [PlayState.instance.camCutscene];
				PlayState.instance.camHUD.visible = false;
				PlayState.instance.camCutscene.visible = true;
				vidEvent.play(filePath);
				vidEvent.bitmap.mute = mute;
			default:
				vidEvent.cameras = [PlayState.instance.camHUD];
				vidEvent.play(filePath);
				vidEvent.bitmap.mute = mute;
		}
		recentTime = Conductor.instance.songPosition;
	}

	function onUpdate(event) {
		if (PlayState.instance != null) {
			if (vidEvent != null) {
				// Re-pause the video when we regain focus due to a weird bug.
				if (PlayState.instance.isGamePaused && vidEvent.bitmap.isPlaying)
					vidEvent.pause();
			}
		}
	}

	function onStepHit(event) {
		super.onStepHit(event);
		if (vidEvent != null && recentTime != null) {
			if (resyncVideo && vidEvent.bitmap.isPlaying) {
				checkResync();
			}
		}
	}

	/**
	 * Helper function for resyncing.
	 * @param instant Resync the video instantly without checking.
	 */
	function checkResync(?instant:Bool = false):Void {
		var correctTime:Float = Conductor.instance.songPosition - recentTime - Conductor.instance.combinedOffset;

		if (instant || Math.abs(vidEvent.bitmap.time - correctTime) > 600) {
			trace('VIDEO NEEDS RESYNC!');
			if (!PlayState.instance.isGamePaused)
				vidEvent.pause();
			vidEvent.bitmap.time = correctTime;
			if (!PlayState.instance.isGamePaused)
				vidEvent.resume();
		}
	}

	function onPause(event) {
		if (vidEvent != null) {
			vidEvent.pause();
			if (resyncVideo) {
				// Force a resync to prevent the video from desyncing when pausing multiple times.
				checkResync(true);
			}
		}
	}

	function onResume(event) {
		if (vidEvent != null)
			vidEvent.resume();
	}

	function onSongRetry(event) {
		if (vidEvent != null) {
			if (shittyBool && vidEvent.bitmap.isPlaying) {
				PlayState.instance.camHUD.visible = true;
				PlayState.instance.camHUD.alpha = 0;
				FlxTween.tween(PlayState.instance.camHUD, {alpha: 1}, 0.5, {ease: FlxEase.quadInOut});
			}
			vidEvent.destroy();
		}
	}

	function onGameOver(event) {
		if (vidEvent != null)
			vidEvent.destroy();
	}
}
