import funkin.play.character.SparrowCharacter;
import funkin.play.character.CharacterType;
import funkin.play.character.BaseCharacter;
import funkin.play.PlayState;
import funkin.Paths;
import funkin.util.Constants;

import flixel.FlxG;
import flixel.FlxSprite;
import flixel.ui.FlxBar;
//import flixel.util.FlxColor;
import flixel.addons.transition.FlxTransitionableState;
import flixel.addons.transition.Transition;
import funkin.Preferences;

class FatalSonic extends SparrowCharacter {

    function new(){
        super('fatal-sonic');
    }

    var fakeNoteAnimsStatic = ["staticLeft", "staticDown", "staticUp", "staticRight"];
    var fakeNoteLeft:FlxSprite = new FlxSprite();
    var fakeNoteDown:FlxSprite = new FlxSprite();
    var fakeNoteUp:FlxSprite = new FlxSprite();
    var fakeNoteRight:FlxSprite = new FlxSprite();

    var started:Bool = false; // Add this variable to track initialization


    function buildFakeNote(note, frame = 0){
        //note = new FlxSprite(-500, 0);
        note.frames = Paths.getSparrowAtlas('fatalNote');
        note.animation.addByPrefix(fakeNoteAnimsStatic[frame], fakeNoteAnimsStatic[frame], 12, false);
        note.animation.play(fakeNoteAnimsStatic[frame]);
        note.scrollFactor.set(0, 0);
        note.cameras = [PlayState.instance.camHUD];
        //note.x = -500;
        note.scale.x = 6;
        note.scale.y = 6;
        note.offset.set(-45, -50);
        note.antialiasing = false;

        PlayState.instance.add(note);
    }

    var originPosXOpponent = [];
    var originPosYOpponent = [];

    function getDefNotesPos(){
        for(quickI in 0...4){
            originPosXOpponent[quickI] = PlayState.instance.opponentStrumline.strumlineNotes.members[quickI].x;
            originPosYOpponent[quickI] = PlayState.instance.opponentStrumline.strumlineNotes.members[quickI].y;
        }
        
    }

    function onAdd(){
        // super.onCreate(ev);
         antialiasing = false;
        // if(characterType == CharacterType.DAD){
         buildFakeNote(fakeNoteLeft, 0);
         buildFakeNote(fakeNoteDown, 1);
         buildFakeNote(fakeNoteUp, 2);
         buildFakeNote(fakeNoteRight, 3);
         
     }

    function onUpdate(ev) {
        super.onUpdate(ev);

        if (!started) {
            getDefNotesPos();
            started = true;
        }

        var oppNote = PlayState.instance.opponentStrumline.strumlineNotes.members;

        // Hide original opponent notes
        for (i in 0...4) {
            oppNote[i].visible = false;
        }

        // Move fake notes to match opponent strumline positions
        for (i in 0...4) {
            switch (i) {
                case 0:
                    fakeNoteLeft.x = originPosXOpponent[i];
                    fakeNoteLeft.y = originPosYOpponent[i];
                case 1:
                    fakeNoteDown.x = originPosXOpponent[i];
                    fakeNoteDown.y = originPosYOpponent[i];
                case 2:
                    fakeNoteUp.x = originPosXOpponent[i];
                    fakeNoteUp.y = originPosYOpponent[i];
                case 3:
                    fakeNoteRight.x = originPosXOpponent[i];
                    fakeNoteRight.y = originPosYOpponent[i];
            }
        }
    }

    function onNoteIncoming(ev){
        if ((!ev.note.noteData.getMustHitNote() && characterType == CharacterType.DAD) /*|| (ev.note.noteData.getMustHitNote() && characterType == CharacterType.BF)*/){
            ev.note.frames = Paths.getSparrowAtlas('fatalNote');

            ev.note.animation.addByPrefix('greenScroll', 'noteUp');
            ev.note.animation.addByPrefix('blueScroll', 'noteDown');
            ev.note.animation.addByPrefix('purpleScroll', 'noteLeft');
            ev.note.animation.addByPrefix('redScroll', 'noteRight');

            ev.note.offset.set(-2.5, -30);

            //for opp notes
            if (characterType == CharacterType.DAD){
                switch(ev.note.noteData.data){
                    case 4:
                        ev.note.animation.play('purpleScroll');
                    case 5:
                        ev.note.animation.play('blueScroll');
                    case 6:
                        ev.note.animation.play('greenScroll');
                    case 7:
                        ev.note.animation.play('redScroll');   
                }
            }
        }
    }
    function onStepHit(event:SongTimeScriptEvent):Void {
        if (event.step == 1984 && PlayState.instance.currentSong.id.toLowerCase() == "fatality")
		{
			fakeNoteLeft.visible = false;
            fakeNoteDown.visible = false;
            fakeNoteUp.visible = false;
            fakeNoteRight.visible = false;
            PlayState.instance.remove(note);
            game.opponentStrumline.visible = false;
            game.opponentStrumline.strumlineNotes.visible = false;
            game.opponentStrumline.x = -5000000;
		}
    }
}