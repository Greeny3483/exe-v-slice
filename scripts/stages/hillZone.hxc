import flixel.FlxG;
import flixel.math.FlxBasePoint;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import flixel.text.FlxText;
import flixel.text.FlxTextBorderStyle;
import flixel.FlxCamera;
import funkin.audio.FunkinSound;
import funkin.Conductor;
import funkin.graphics.FunkinSprite;
import funkin.modding.module.ScriptedModule;
import funkin.modding.events.ScriptEvent;
import funkin.modding.events.ScriptEventDispatcher;
import funkin.util.ReflectUtil;
import funkin.Paths;
import funkin.play.PlayState;
import funkin.play.stage.Stage;
import funkin.play.stage.Bopper;
import funkin.play.stage.StageProp;
import funkin.data.stage.StageRegistry;
import funkin.play.character.CharacterType;
import funkin.play.character.BaseCharacter;
import funkin.play.character.CharacterDataParser;
import funkin.play.song.Song;
import flixel.FlxSprite;
import haxe.Json;
import funkin.play.notes.Strumline;
import funkin.play.notes.StrumlineNote;
import funkin.modding.module.ModuleHandler;

//This script adds the proper events for Too Slow.

class HillZone extends Stage
{
	public function new()
	{
		super('hillZone');
	}

	var staticScreen:FunkinSprite;
	var sonicJumpscare:FunkinSprite;
	var sonicJump:FunkinSprite;
	var topBorder:FlxSprite;
	var bottomBorder:FlxSprite;

	override function onCreate(event:ScriptEvent):Void
	{
		super.onCreate(event);

		enableStatic = ModuleHandler.getModule("EXEOptions").scriptGet("screenstatic");
		enableJumpscare = ModuleHandler.getModule("EXEOptions").scriptGet("dojumpscares");

		FunkinSprite.cacheTexture(Paths.image('staticNotes'));
		FunkinSprite.cacheTexture(Paths.image('sonicJUMPSCARE'));
		FunkinSprite.cacheTexture(Paths.image('characters/sonicexe-gotcha')); // Will this work?

		game = PlayState.instance;

		if (game.currentSong.id.toLowerCase() == "too-slow") {

			if (enableJumpscare) {
			    sonicJumpscare = FunkinSprite.create(100, 0);
                sonicJumpscare.frames = Paths.getSparrowAtlas('sonicJUMPSCARE');
                sonicJumpscare.animation.addByPrefix('spook', 'sonicSPOOK', 24, false); // org. framerate is 36 // 24 (base game)
                sonicJumpscare.animation.play('spook');
                sonicJumpscare.zIndex = 5000;
			    sonicJumpscare.cameras = [game.camCutscene];
			    game.add(sonicJumpscare);
			    sonicJumpscare.visible = false;
			    sonicJumpscare.animation.finishCallback = function() {
                    sonicJumpscare.visible = false;
                };

			    sonicJump = FunkinSprite.create(0, 0, 'simplejump720'); // Resized it to 720p because I did NOT feel like doing all of that. 
			    sonicJump.cameras = [game.camCutscene];
			    game.add(sonicJump);
			    sonicJump.visible = false;
			}

			if (enableStatic) {
				staticScreen = FunkinSprite.create(100, 0);
                staticScreen.frames = Paths.getSparrowAtlas('daSTAT');
                staticScreen.animation.addByPrefix('static', 'staticFLASH', 30, false); // Speed it up
                staticScreen.animation.play('static');
			    staticScreen.scale.set(5, 5);
                staticScreen.zIndex = 5000;
			    staticScreen.cameras = [game.camHUD];
			    game.add(staticScreen);
			    staticScreen.visible = false;

			    staticScreen.animation.finishCallback = function() {
                    staticScreen.visible = false;
                };
			}

			// The "Cinematics"
			topBorder = new FlxSprite(0, 0).makeGraphic(FlxG.width, 50, 0xFF000000);
			bottomBorder = new FlxSprite(0, FlxG.height - 50).makeGraphic(FlxG.width, 50, 0xFF000000);
			topBorder.scale.set(5, 5);
			bottomBorder.scale.set(5, 5);
	
			topBorder.cameras = [game.camCutscene];
			bottomBorder.cameras = [game.camCutscene];

			topBorder.alpha = 0;
			bottomBorder.alpha = 0;
	
			game.add(topBorder);
			game.add(bottomBorder);

		}
	}

	override function buildStage()
	{
		super.buildStage();
	}

	function onStepHit(event:SongTimeScriptEvent):Void
	{
		super.onStepHit(event);

		if (game.currentSong.id.toLowerCase() == "too-slow" && enableStatic && (event.beat == 2 || event.beat % 50 == 0)) // Show static screen at beat 2 and every 50 beats
		{
			staticScreen.visible = true;
			staticScreen.animation.play('static');
			var staticScreenSound = FunkinSound.playOnce(Paths.sound("staticBUZZ"), 0.6);
			FlxTween.tween(staticScreenSound, { volume: 0 }, 1, {
				onComplete: function(tween:FlxTween) {
					staticScreenSound.stop();
				}
			});
		}
		if (game.currentSong.id.toLowerCase() == "too-slow" && event.step == 763 && game.currentVariation != "encore")
		{
			FlxG.camera.flash(0xFFFF0000, 1);    
		}
		if (game.currentSong.id.toLowerCase() == "too-slow" && event.step == 1166 && game.currentVariation != "encore")
		{
			// Fade in borders
			FlxTween.tween(topBorder, { alpha: 1 }, 1);
			FlxTween.tween(bottomBorder, { alpha: 1 }, 1);
			game.camHUD.alpha = 0;
		}
		if (game.currentSong.id.toLowerCase() == "too-slow" && event.step == 1190 && enableJumpscare && game.currentVariation != "encore")
		{
			sonicJump.visible = true;
			new FlxTimer().start(0.3, function(timer:FlxTimer) {
				sonicJump.visible = false;
			}); // Hide after 0.3 seconds
			FunkinSound.playOnce(Paths.sound("sppok"), 1);
		}
		if (game.currentSong.id.toLowerCase() == "too-slow" && event.step == 1261 && game.currentVariation != "encore")
		{
			// Fade out borders
			FlxTween.tween(topBorder, { alpha: 0 }, 1, {
				onComplete: function(tween:FlxTween) {
					topBorder.visible = false;
				}
			});
			FlxTween.tween(bottomBorder, { alpha: 0 }, 1, {
				onComplete: function(tween:FlxTween) {
					bottomBorder.visible = false;
				}
			});
			FlxTween.tween(game.camHUD, { alpha: 1 }, 1);
		}
		if (game.currentSong.id.toLowerCase() == "too-slow" && event.step == 1472 && enableJumpscare && game.currentVariation != "encore")
		{
			sonicJumpscare.visible = true;
			sonicJumpscare.animation.play('spook');
			FunkinSound.playOnce(Paths.sound("datOneSound"), 1);
		}
	}
}
