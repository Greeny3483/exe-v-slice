import flixel.FlxG;
import flixel.math.FlxBasePoint;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import flixel.text.FlxText;
import flixel.text.FlxTextBorderStyle;
import flixel.FlxCamera;
import funkin.audio.FunkinSound;
import funkin.Conductor;
import funkin.graphics.FunkinSprite;
import funkin.modding.module.ScriptedModule;
import funkin.modding.events.ScriptEvent;
import funkin.modding.events.ScriptEventDispatcher;
import funkin.util.ReflectUtil;
import funkin.Paths;
import funkin.play.PlayState;
import funkin.play.stage.Stage;
import funkin.play.stage.Bopper;
import funkin.play.stage.StageProp;
import funkin.data.stage.StageRegistry;
import funkin.play.character.CharacterType;
import funkin.play.character.BaseCharacter;
import funkin.play.character.CharacterDataParser;
import funkin.play.song.Song;
import flixel.FlxSprite;
import haxe.Json;
import funkin.play.notes.Strumline;
import funkin.play.notes.StrumlineNote;
import flixel.math.FlxMath;
import flixel.math.FlxPoint;

/* ---------------------------------------
    Script by Greeny3483
	Permissions to use are granted, just credit me.

	Note:
	- Fatal Error's "Fatal Strumline" is located in the character scripts (fatal-sonic).
	- These functions are still a work in progress.
	---------------------------------------
*/

class FatalZone extends Stage
{

	public var middlescroll = FlxG.width / 2 - PlayState.instance.playerStrumline.width / 2;
	//public var invisible = -50000;         

	var statix:FunkinSprite;
	var leftBorder:FlxSprite;
	var rightBorder:FlxSprite;
	var popups:Array<FlxSprite>; // Array to hold popup sprites
	public var popupTimer:FlxTimer; // Timer to control popup appearance
	var fatalCursor:FlxSprite; // Custom mouse cursor sprite


	public var popup = FunkinSprite.create(FlxG.random.float(0, FlxG.width - 300), FlxG.random.float(0, FlxG.height - 300)); // Insert popup as a class-level variable

	public function new()
	{
		super('fatalZone');
	}

	override function onCreate(event:ScriptEvent):Void
	{
		super.onCreate(event);

		game = PlayState.instance;

		FunkinSprite.cacheTexture(Paths.image('fatal/domain')); // Despite the stage already loading them just with a low Z-Index, the game lagged if I didn't do this.
		FunkinSprite.cacheTexture(Paths.image('fatal/domain2'));
		FunkinSprite.cacheTexture(Paths.image('fatal/truefatalstage'));
		FunkinSprite.cacheTexture(Paths.image('error_popups'));


		if (game.currentSong.id.toLowerCase() == "fatality") {

			statix = FunkinSprite.create(0, 0);
			statix.frames = Paths.getSparrowAtlas('statix');
			statix.animation.addByPrefix('static', 'statixx', 44, false);
			statix.animation.play('static');
			statix.scale.set(5.5, 5.5);
			statix.cameras = [game.camHUD];
			game.add(statix);
			statix.visible = false;
			statix.animation.finishCallback = function() {
				statix.visible = false;
			};
	
			leftBorder = new FlxSprite(0, 0).makeGraphic(50, FlxG.height, 0xFF000000); // You can edit screen ratio with scripting, but I didn't feel like it. This works just as good
			leftBorder.scrollFactor.set(0, 0);
			leftBorder.scale.set(5, 3);
			leftBorder.cameras = [game.camHUD];
			game.add(leftBorder);
	
			rightBorder = new FlxSprite(FlxG.width - 50, 0).makeGraphic(50, FlxG.height, 0xFF000000);
			rightBorder.scrollFactor.set(0, 0);
			rightBorder.scale.set(5, 3);
			rightBorder.cameras = [game.camHUD];
			game.add(rightBorder);
		}

		fatalCursor = new FlxSprite();
		fatalCursor.loadGraphic(Paths.image('fatal_mouse_cursor'));
		fatalCursor.scrollFactor.set(0, 0);
		fatalCursor.cameras = [game.camHUD];
		fatalCursor.setGraphicSize(Std.int(fatalCursor.width * 1.5), Std.int(fatalCursor.height * 1.5));
		fatalCursor.updateHitbox();
		fatalCursor.antialiasing = false;
		game.add(fatalCursor);

		fatalCursor.zIndex = 9999;
		PlayState.instance.currentStage.refresh();

		FlxG.mouse.visible = false; // Hide the default system cursor

		popups = [];
		popupTimer = new FlxTimer();
	}

	function createPopup():Void
	{
		// Create a new popup
		var popup = FunkinSprite.create(
			FlxG.random.float(0, FlxG.width - 400), // Random X position, adjusted for popup width
			FlxG.random.float(0, FlxG.height - 300) // Random Y position, adjusted for popup height
		);
		popup.frames = Paths.getSparrowAtlas('error_popups');
		if (popup.frames != null) {
			popup.animation.addByPrefix('popup_anim', 'idle', 24, false);
			popup.animation.addByPrefix('bye', 'bye', 24, false);
			popup.animation.play('popup_anim');
		}
		popup.scrollFactor.set(0, 0);
		popup.cameras = [game.camHUD];
		popup.scale.set(1.6, 1.6);
		popup.zIndex = 8000;
		popup.updateHitbox();
		popup.antialiasing = false;
		game.add(popup);
		popups.push(popup);

		PlayState.instance.currentStage.refresh();
	}

	function clearPopups():Void
	{
		// Remove all popups
		for (popup in popups)
		{
			game.remove(popup);
			popup.destroy();
		}
		popups = [];
	}

	function clearPopupsQuickly():Void
	{
		// Remove all popups one at a time, very quickly
		var delay:Float = 0;
		for (popup in popups)
		{
			if (popup != null)
			{
				var timer = new FlxTimer();
				timer.start(delay, function(timer:FlxTimer):Void {
					removePopup(popup);
				});
				delay += 0.07; // Reduced delay for faster removal
			}
		}
	}

	function removePopup(popup:FlxSprite):Void
	{
		if (popup != null && popup.animation != null) {
			popup.animation.play('bye');
			popup.animation.finishCallback = function() {
				if (popup != null) {
					game.remove(popup); // Remove the popup from the game
					popups.remove(popup); // Remove the popup from the array
					popup.destroy(); // Destroy the popup to free memory
				}
			};
		}
	}

	override function update(elapsed:Float):Void
	{
		super.update(elapsed);

		// Add a custom cursor
		var mousePos = FlxG.mouse.getWorldPosition(game.camHUD); 
		fatalCursor.x = mousePos.x - (fatalCursor.width / 2);
		fatalCursor.y = mousePos.y - (fatalCursor.height / 2);

		fatalCursor.scale.set(1 + 0.05 * Math.sin(FlxG.game.ticks / 10), 1 + 0.05 * Math.sin(FlxG.game.ticks / 10));

		if (FlxG.mouse.justPressed)
		{
			var mousePos = FlxG.mouse.getWorldPosition(game.camHUD);
			for (popup in popups)
			{
				if (popup.overlapsPoint(mousePos, true))
				{
					removePopup(popup);
					break;
				}
			}
		}

		// Remove popups that have finished their "bye" animation
		for (popup in popups)
		{
			if (popup.animation.curAnim != null && popup.animation.curAnim.name == 'bye' && popup.animation.curAnim.finished)
			{
				game.remove(popup);
				popups.remove(popup);
				popup.destroy();
			}
		}
	}

	function onCountdownStart()
	{
		if (game.opponentStrumline != null && game.playerStrumline != null) {
			game.opponentStrumline.x = 150;
			game.playerStrumline.x = 692;
            
			// Adjust the position of the Player and Opponent's strumlines to match the "makeshift" screen ratio.
		}
	}

	override function buildStage()
	{
		super.buildStage();
	}

	function onStepHit(event:SongTimeScriptEvent):Void
	{
		var phase2 = getNamedProp('fatalityBg2');
		var phase2bg = getNamedProp('fatalityBg3');
		var phase3bg = getNamedProp('fatalityBg4');

		if (event.step == 257 && game.currentSong.id.toLowerCase() == "fatality")
		{
			statix.visible = true;
			statix.animation.play('static');

			if (statix != null) {
				var timer = new FlxTimer();
				timer.start(0.12, function(timer:FlxTimer):Void {
					statix.visible = false;
				});
			}
			
			phase2bg.zIndex = 11;
			phase2.zIndex = 12;
			PlayState.instance.currentStage.refresh();

			// Start creating popups at 257 (Phase 2)
			popupTimer.start(2, function(timer:FlxTimer):Void {
				createPopup();
			}, 0);
		}

		if (event.step == 513 && game.currentSong.id.toLowerCase() == "fatality")
		{
			// Start creating popups every 2 beats
			popupTimer.start(event.beat % 2 == 0, function(timer:FlxTimer):Void {
				createPopup();
			}, 0);
		}

		if (event.step == 897 && game.currentSong.id.toLowerCase() == "fatality")
		{
			clearPopups();
			popupTimer.start(2, function(timer:FlxTimer):Void {
				createPopup();
			}, 0);
		}

		if (event.step == 1727 && game.currentSong.id.toLowerCase() == "fatality")
		{
			clearPopupsQuickly();
		}

	    if (event.step == 1984 && game.currentSong.id.toLowerCase() == "fatality")
		{
			clearPopups();
			popupTimer.start(event.beat % 1 == 0, function(timer:FlxTimer):Void { // Intense
				createPopup();
			}, 0);
			
			statix.visible = true;
			statix.animation.play('static');

			if (statix != null) {
				var timer2 = new FlxTimer();
				timer2.start(0.12, function(timer:FlxTimer):Void {
					statix.visible = false;
				});
			}
			
			phase3bg.zIndex = 20;
			PlayState.instance.currentStage.refresh(); // Apply Z-Index.

			game.playerStrumline.x = middlescroll; // Enable middlescroll

		}
		if (event.step == 2527 && game.currentSong.id.toLowerCase() == "fatality")
		{
			clearPopupsQuickly();
		}
	}
}
