import flixel.FlxG;
import flixel.math.FlxBasePoint;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import flixel.text.FlxText;
import flixel.text.FlxTextBorderStyle;
import flixel.FlxCamera;
import funkin.audio.FunkinSound;
import funkin.Conductor;
import funkin.play.Countdown;
import funkin.graphics.FunkinSprite;
import funkin.modding.module.ScriptedModule;
import funkin.modding.events.ScriptEvent;
import funkin.modding.events.ScriptEventDispatcher;
import funkin.util.ReflectUtil;
import funkin.Paths;
import funkin.play.PlayState;
import funkin.play.stage.Stage;
import funkin.play.stage.Bopper;
import funkin.play.stage.StageProp;
import funkin.data.stage.StageRegistry;
import funkin.play.character.CharacterType;
import funkin.play.character.BaseCharacter;
import funkin.play.character.CharacterDataParser;
import funkin.play.song.Song;
import flixel.FlxSprite;
import haxe.Json;
import funkin.play.notes.Strumline;
import funkin.play.notes.StrumlineNote;
import flixel.math.FlxMath;
import flixel.math.FlxPoint;

// Final Escape.
// Some extra stuff is done in the other script (scripts/songs/final-escape.hxc), for the events and such, it's here.

class FinalStage extends Stage
{
	public function new()
	{
		super('finalstage');
	}

    var blackOverlay:FunkinSprite;
	var hereWeGo:FunkinSprite;
	var bfLegs1:FunkinSprite;
	var opponentFloatOffset:Float = 0; // Offset for sine wave movement

	override function onCreate(event:ScriptEvent):Void
	{
		super.onCreate(event);

		game = PlayState.instance;
		//dad = game.currentStage.getDad();

		blackOverlay = FunkinSprite.create(0, 0, 'blackness');
		blackOverlay.alpha = 1;
		blackOverlay.zIndex = 299;
		blackOverlay.scale.set(5, 5);
		//blackOverlay.cameras = [game.camHUD];
		blackOverlay.zIndex = 3000;
		blackOverlay.scrollFactor.set(0, 0); // Make it static (doesn't scroll with the camera)
		game.add(blackOverlay);

		hereWeGo = FunkinSprite.create(-150, -300);
		hereWeGo.frames = Paths.getSparrowAtlas('hwg');
		hereWeGo.animation.addByPrefix('go', 'hi', 24, false);
		hereWeGo.animation.play('go');
		hereWeGo.scale.set(0.7, 0.7);
		hereWeGo.cameras = [game.camHUD];
		game.add(hereWeGo);
		hereWeGo.visible = false;
		hereWeGo.animation.finishCallback = function() {
			hereWeGo.visible = false;
		};

		bfLegs1 = FunkinSprite.create(-150, 350);
		bfLegs1.frames = Paths.getSparrowAtlas('characters/hisleg');
		bfLegs1.animation.addByPrefix('idle', 'leg', 24, true);
		bfLegs1.animation.play('idle');
		bfLegs1.scale.set(1, 1);
		bfLegs1.zIndex = 2000;
		game.add(bfLegs1);
		bfLegs1.visible = false;

	}
    function disableHud():Void {
		if (game != null) {
			game.opponentStrumline.visible = false;
			game.playerStrumline.visible = false;
			game.scoreText.visible = false;
			game.healthBar.visible = false;
			game.healthBarBG.visible = false;
			game.iconP1.visible = false;
			game.iconP2.visible = false;
		}
	}

	function enableHud():Void {
		if (game != null) {
			game.opponentStrumline.visible = true;
			game.playerStrumline.visible = true;
			game.scoreText.visible = true;
			game.healthBar.visible = true;
			game.healthBarBG.visible = true;
			game.iconP1.visible = true;
			game.iconP2.visible = true;
		}
	}

	public override function onCountdownStart(event:CountdownScriptEvent):Void
	{
		super.onCountdownStart(event);
		
		disableHud();
		//Countdown.skipCountdown();
	}

	override function buildStage()
	{
		super.buildStage();
	}

	override function update(elapsed:Float):Void {
		super.update(elapsed);

		if (game != null) {
			opponentFloatOffset += elapsed * 1.5;
			game.currentStage.getDad().y += Math.sin(opponentFloatOffset) * 1.5;
		}
	}

	public function onNoteHit(event:HitNoteScriptEvent)
	{
		super.onNoteHit(event);

		if (PlayState.instance.songPosition >= Conductor.stepCrochet * 484 / 4) // Check if step is 484 or later
		{
			if (!event.note.noteData.getMustHitNote())
			{
				if (event.note.holdNoteSprite != null)
				{
					FlxG.camera.shake(0.005, event.note.holdNoteSprite.sustainLength/1000);
				} else {
					FlxG.camera.shake(0.005, 0.2);
				}
			}
		}
	}

	public function onStepHit(event:SongTimeScriptEvent):Void
	{
		super.onStepHit(event);
		var introBG = getNamedProp('IntroBG');

		if (event.step == 177 || event.step == 484)
		{
			FlxG.camera.flash(0xFFFFFFFF, 0.5);
		}
		if (event.step == 223) {
			enableHud();
			blackOverlay.visible = false;
		}
		if (event.step == 465) {
			blackOverlay.visible = true;
			disableHud();
			hereWeGo.visible = true;
			hereWeGo.animation.play('go');
			//hereWeGo.cameras = [game.camHUD];
		}
		if (event.step == 484) {
			blackOverlay.visible = false;
			enableHud();

			introBG.zIndex = -50; //

			bfLegs1.visible = true;
			bfLegs1.animation.play('idle');
			PlayState.instance.currentStage.getDad().zIndex = -2;
			PlayState.instance.currentStage.refresh();
		}
		if (event.step == 864) {
			blackOverlay.visible = true;
			blackOverlay.alpha = 0; // Ensure alpha starts at 0
			FlxTween.tween(blackOverlay, { alpha: 1 }, 1, { ease: FlxEase.quadOut });
		}
		if (event.step == 895) {
			blackOverlay.visible = false;
		}
		if (event.step == 895 || event.step == 904 || event.step == 912 || event.step == 919 || event.step == 925 || event.step == 1024 || event.step == 1033 || event.step == 1039 || event.step == 1048 || event.step == 1053) {
			FlxG.camera.flash(0xFFFF0000, 0.5); // Red camera flash
		}
	}
}
